-- Haskell Playground 1.0
solutions ex1

--ex1 :: Formula ()
--ex1 = Body (Con True)
--
--ex2 :: Formula (Int, ())
--ex2 = Forall [1..10] $ \n ->
--        Body $ n `Smaller` (n `Plus` Con 1)
--        
--ex3 :: Formula (Bool, (Int, ()))
--ex3 = Forall [False, True] $ \p -> 
--      Forall [0..2] $ \n -> 
--        Body $ p `Or` (Con 0 `Smaller` n)

--data Formula ts where
--  Body   :: Term Bool                     -> Formula ()
--  Forall :: Show a 
--         => [a] -> (Term a -> Formula as) -> Formula (a, as)


--instance Show (Formula ts) where
--  show = show' ['x' : show i | i <- [0..]]
--    where
--      show' :: [String] -> Formula ts' -> String
--      show' ns     (Body body)   = show body
--      show' (n:ns) (Forall vs p) = "forall " ++ n ++ "::" ++ show vs ++ ". " ++ show' ns (p (Name n))

ex3